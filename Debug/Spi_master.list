
Spi_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036fc  080036fc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003700  08003700  00004700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003704  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  2000000c  08003710  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08003710  000055f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f49e  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a9  00000000  00000000  000144d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00016980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3d  00000000  00000000  000176c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa34  00000000  00000000  000180fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101b6  00000000  00000000  00037b31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfbb0  00000000  00000000  00047ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f8  00000000  00000000  001078dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0010b0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080036c4 	.word	0x080036c4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080036c4 	.word	0x080036c4

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fc54 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f844 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f964 	bl	8000788 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004c0:	f000 f90e 	bl	80006e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004c4:	f000 f936 	bl	8000734 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80004c8:	f000 f8d4 	bl	8000674 <MX_SPI1_Init>
  MX_ADC1_Init();
 80004cc:	f000 f880 	bl	80005d0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT (&hadc1);
 80004d0:	4802      	ldr	r0, [pc, #8]	@ (80004dc <main+0x2c>)
 80004d2:	f000 fd1b 	bl	8000f0c <HAL_ADC_Start_IT>
 // HAL_SPI_Receive_IT(&hspi1, &data, 4); //Receiving in Interrupt mode
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d6:	bf00      	nop
 80004d8:	e7fd      	b.n	80004d6 <main+0x26>
 80004da:	bf00      	nop
 80004dc:	20000028 	.word	0x20000028

080004e0 <HAL_ADC_ConvCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
    // Ensure this callback is for the correct ADC instance
    if (hadc->Instance == ADC1)  // Replace with your actual ADC instance name
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <HAL_ADC_ConvCpltCallback+0x58>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d11e      	bne.n	8000530 <HAL_ADC_ConvCpltCallback+0x50>
    {
        // Get the 12-bit ADC value
    	data = HAL_ADC_GetValue(hadc) & 0x0FFF; // Mask to get only the lower 12 bits
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f000 fed4 	bl	80012a0 <HAL_ADC_GetValue>
 80004f8:	4603      	mov	r3, r0
 80004fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004fe:	4a0f      	ldr	r2, [pc, #60]	@ (800053c <HAL_ADC_ConvCpltCallback+0x5c>)
 8000500:	6013      	str	r3, [r2, #0]

        // Prepare the data for transmission (2 bytes for 12-bit value)
        uint8_t data_to_send[2];
        data_to_send[1] = (data & 0xFF);           // Least significant byte
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <HAL_ADC_ConvCpltCallback+0x5c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	737b      	strb	r3, [r7, #13]
        data_to_send[0] = (data >> 8) & 0x04;      // Most significant byte (only 4 bits used)
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <HAL_ADC_ConvCpltCallback+0x5c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	b2db      	uxtb	r3, r3
 8000512:	f003 0304 	and.w	r3, r3, #4
 8000516:	b2db      	uxtb	r3, r3
 8000518:	733b      	strb	r3, [r7, #12]

        // Transmit the data over UART (or SPI if needed)
        HAL_UART_Transmit(&huart3, data_to_send, 2, HAL_MAX_DELAY);
 800051a:	f107 010c 	add.w	r1, r7, #12
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	2202      	movs	r2, #2
 8000524:	4806      	ldr	r0, [pc, #24]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x60>)
 8000526:	f002 fb82 	bl	8002c2e <HAL_UART_Transmit>

        // Optionally restart ADC conversion if needed
        HAL_ADC_Start_IT(hadc); // Uncomment if you're in single conversion mode
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f000 fcee 	bl	8000f0c <HAL_ADC_Start_IT>
    } }
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40012000 	.word	0x40012000
 800053c:	200005ec 	.word	0x200005ec
 8000540:	200000c8 	.word	0x200000c8

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b092      	sub	sp, #72	@ 0x48
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2230      	movs	r2, #48	@ 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 f889 	bl	800366a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 800057c:	23f0      	movs	r3, #240	@ 0xf0
 800057e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000584:	2305      	movs	r3, #5
 8000586:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fcc9 	bl	8001f24 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000598:	f000 f9e8 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2103      	movs	r1, #3
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 ff07 	bl	80023cc <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c4:	f000 f9d2 	bl	800096c <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3748      	adds	r7, #72	@ 0x48
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005e4:	4a21      	ldr	r2, [pc, #132]	@ (800066c <MX_ADC1_Init+0x9c>)
 80005e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000608:	4b17      	ldr	r3, [pc, #92]	@ (8000668 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060e:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000610:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <MX_ADC1_Init+0xa0>)
 8000612:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_ADC1_Init+0x98>)
 800061c:	2201      	movs	r2, #1
 800061e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800062e:	480e      	ldr	r0, [pc, #56]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000630:	f000 fc28 	bl	8000e84 <HAL_ADC_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800063a:	f000 f997 	bl	800096c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800063e:	2303      	movs	r3, #3
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000646:	2301      	movs	r3, #1
 8000648:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0x98>)
 8000650:	f000 fe44 	bl	80012dc <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800065a:	f000 f987 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028
 800066c:	40012000 	.word	0x40012000
 8000670:	0f000001 	.word	0x0f000001

08000674 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000678:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_SPI1_Init+0x64>)
 800067a:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <MX_SPI1_Init+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800067e:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <MX_SPI1_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000684:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <MX_SPI1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069c:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_SPI1_Init+0x64>)
 800069e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_SPI1_Init+0x64>)
 80006a6:	2208      	movs	r2, #8
 80006a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_SPI1_Init+0x64>)
 80006be:	220a      	movs	r2, #10
 80006c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_SPI1_Init+0x64>)
 80006c4:	f002 f8c8 	bl	8002858 <HAL_SPI_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80006ce:	f000 f94d 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000070 	.word	0x20000070
 80006dc:	40013000 	.word	0x40013000

080006e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <MX_USART3_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART3_UART_Init+0x4c>)
 8000718:	f002 fa39 	bl	8002b8e <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f923 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000c8 	.word	0x200000c8
 8000730:	40004800 	.word	0x40004800

08000734 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800073a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800073e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000742:	2204      	movs	r2, #4
 8000744:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000748:	2202      	movs	r2, #2
 800074a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000754:	2202      	movs	r2, #2
 8000756:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800075a:	2201      	movs	r2, #1
 800075c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000766:	2201      	movs	r2, #1
 8000768:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000772:	f001 fac7 	bl	8001d04 <HAL_PCD_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 f8f6 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000110 	.word	0x20000110

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b6d      	ldr	r3, [pc, #436]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a6c      	ldr	r2, [pc, #432]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b66      	ldr	r3, [pc, #408]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a65      	ldr	r2, [pc, #404]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b63      	ldr	r3, [pc, #396]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b5f      	ldr	r3, [pc, #380]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a5e      	ldr	r2, [pc, #376]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b5c      	ldr	r3, [pc, #368]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b58      	ldr	r3, [pc, #352]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a57      	ldr	r2, [pc, #348]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b55      	ldr	r3, [pc, #340]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b51      	ldr	r3, [pc, #324]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a50      	ldr	r2, [pc, #320]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b4a      	ldr	r3, [pc, #296]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a49      	ldr	r2, [pc, #292]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 8000834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b47      	ldr	r3, [pc, #284]	@ (8000958 <MX_GPIO_Init+0x1d0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f244 0181 	movw	r1, #16513	@ 0x4081
 800084c:	4843      	ldr	r0, [pc, #268]	@ (800095c <MX_GPIO_Init+0x1d4>)
 800084e:	f001 fa41 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	@ 0x40
 8000856:	4842      	ldr	r0, [pc, #264]	@ (8000960 <MX_GPIO_Init+0x1d8>)
 8000858:	f001 fa3c 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000862:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	483c      	ldr	r0, [pc, #240]	@ (8000964 <MX_GPIO_Init+0x1dc>)
 8000874:	f001 f890 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000878:	2332      	movs	r3, #50	@ 0x32
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000888:	230b      	movs	r3, #11
 800088a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4834      	ldr	r0, [pc, #208]	@ (8000964 <MX_GPIO_Init+0x1dc>)
 8000894:	f001 f880 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000898:	2386      	movs	r3, #134	@ 0x86
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008a8:	230b      	movs	r3, #11
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	482d      	ldr	r0, [pc, #180]	@ (8000968 <MX_GPIO_Init+0x1e0>)
 80008b4:	f001 f870 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4822      	ldr	r0, [pc, #136]	@ (800095c <MX_GPIO_Init+0x1d4>)
 80008d2:	f001 f861 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e8:	230b      	movs	r3, #11
 80008ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	481a      	ldr	r0, [pc, #104]	@ (800095c <MX_GPIO_Init+0x1d4>)
 80008f4:	f001 f850 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f8:	2340      	movs	r3, #64	@ 0x40
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4814      	ldr	r0, [pc, #80]	@ (8000960 <MX_GPIO_Init+0x1d8>)
 8000910:	f001 f842 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_GPIO_Init+0x1d8>)
 8000928:	f001 f836 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800092c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093e:	230b      	movs	r3, #11
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_GPIO_Init+0x1d8>)
 800094a:	f001 f825 	bl	8001998 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	@ 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40021800 	.word	0x40021800
 8000964:	40020800 	.word	0x40020800
 8000968:	40020000 	.word	0x40020000

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_Handler+0x8>

08000978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <HAL_MspInit+0x48>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a0e      	ldr	r2, [pc, #56]	@ (80009c0 <HAL_MspInit+0x48>)
 8000988:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <HAL_MspInit+0x48>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_MspInit+0x48>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_MspInit+0x48>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_MspInit+0x48>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	@ 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a50 <HAL_ADC_MspInit+0x8c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12f      	bne.n	8000a46 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_ADC_MspInit+0x90>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <HAL_ADC_MspInit+0x90>)
 80009f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_ADC_MspInit+0x90>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <HAL_ADC_MspInit+0x90>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <HAL_ADC_MspInit+0x90>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_ADC_MspInit+0x90>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a1e:	2309      	movs	r3, #9
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a22:	2303      	movs	r3, #3
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <HAL_ADC_MspInit+0x94>)
 8000a32:	f000 ffb1 	bl	8001998 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2012      	movs	r0, #18
 8000a3c:	f000 ff55 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a40:	2012      	movs	r0, #18
 8000a42:	f000 ff6e 	bl	8001922 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40012000 	.word	0x40012000
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2c      	ldr	r2, [pc, #176]	@ (8000b2c <HAL_SPI_MspInit+0xd0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d151      	bne.n	8000b22 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a2a      	ldr	r2, [pc, #168]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000a88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_SPI_MspInit+0xd4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ad2:	2360      	movs	r3, #96	@ 0x60
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae2:	2305      	movs	r3, #5
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <HAL_SPI_MspInit+0xd8>)
 8000aee:	f000 ff53 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af2:	2320      	movs	r3, #32
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b02:	2305      	movs	r3, #5
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480a      	ldr	r0, [pc, #40]	@ (8000b38 <HAL_SPI_MspInit+0xdc>)
 8000b0e:	f000 ff43 	bl	8001998 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2023      	movs	r0, #35	@ 0x23
 8000b18:	f000 fee7 	bl	80018ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b1c:	2023      	movs	r0, #35	@ 0x23
 8000b1e:	f000 ff00 	bl	8001922 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb4:	f000 fef0 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020c00 	.word	0x40020c00

08000bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bec:	d13f      	bne.n	8000c6e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a20      	ldr	r2, [pc, #128]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c0a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <HAL_PCD_MspInit+0xb0>)
 8000c28:	f000 feb6 	bl	8001998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <HAL_PCD_MspInit+0xb0>)
 8000c42:	f000 fea9 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c50:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_PCD_MspInit+0xac>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f898 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <ADC_IRQHandler+0x10>)
 8000cde:	f000 f9cf 	bl	8001080 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000028 	.word	0x20000028

08000cec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <SPI1_IRQHandler+0x10>)
 8000cf2:	f001 fe3b 	bl	800296c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000070 	.word	0x20000070

08000d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000d10:	f7ff fff6 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f002 fc9f 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fbb7 	bl	80004b0 <main>
  bx  lr
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d50:	08003704 	.word	0x08003704
  ldr r2, =_sbss
 8000d54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d58:	200005f4 	.word	0x200005f4

08000d5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <CAN1_RX0_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 fda3 	bl	80018d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fdf0 	bl	8000978 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 fdbb 	bl	800193e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 fd83 	bl	80018ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	@ (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a03      	ldr	r2, [pc, #12]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	20000008 	.word	0x20000008
 8000e24:	200005f0 	.word	0x200005f0

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	@ (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	200005f0 	.word	0x200005f0

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e033      	b.n	8000f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fd8e 	bl	80009c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d118      	bne.n	8000ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000eca:	f023 0302 	bic.w	r3, r3, #2
 8000ece:	f043 0202 	orr.w	r2, r3, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 fb20 	bl	800151c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f023 0303 	bic.w	r3, r3, #3
 8000eea:	f043 0201 	orr.w	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef2:	e001      	b.n	8000ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_ADC_Start_IT+0x1a>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e09f      	b.n	8001066 <HAL_ADC_Start_IT+0x15a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d018      	beq.n	8000f6e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0201 	orr.w	r2, r2, #1
 8000f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4c:	4b48      	ldr	r3, [pc, #288]	@ (8001070 <HAL_ADC_Start_IT+0x164>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a48      	ldr	r2, [pc, #288]	@ (8001074 <HAL_ADC_Start_IT+0x168>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9a      	lsrs	r2, r3, #18
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f9      	bne.n	8000f62 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d167      	bne.n	800104c <HAL_ADC_Start_IT+0x140>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d007      	beq.n	8000fae <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fa6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fba:	d106      	bne.n	8000fca <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc0:	f023 0206 	bic.w	r2, r3, #6
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	645a      	str	r2, [r3, #68]	@ 0x44
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000fe0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000ff6:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <HAL_ADC_Start_IT+0x16c>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10f      	bne.n	8001022 <HAL_ADC_Start_IT+0x116>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d129      	bne.n	8001064 <HAL_ADC_Start_IT+0x158>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	e020      	b.n	8001064 <HAL_ADC_Start_IT+0x158>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <HAL_ADC_Start_IT+0x170>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d11b      	bne.n	8001064 <HAL_ADC_Start_IT+0x158>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d114      	bne.n	8001064 <HAL_ADC_Start_IT+0x158>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	e00b      	b.n	8001064 <HAL_ADC_Start_IT+0x158>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001050:	f043 0210 	orr.w	r2, r3, #16
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105c:	f043 0201 	orr.w	r2, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	20000000 	.word	0x20000000
 8001074:	431bde83 	.word	0x431bde83
 8001078:	40012300 	.word	0x40012300
 800107c:	40012000 	.word	0x40012000

08001080 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d049      	beq.n	800114a <HAL_ADC_IRQHandler+0xca>
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d046      	beq.n	800114a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d12b      	bne.n	800113a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d127      	bne.n	800113a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001102:	2b00      	cmp	r3, #0
 8001104:	d119      	bne.n	800113a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0220 	bic.w	r2, r2, #32
 8001114:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d105      	bne.n	800113a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff f9d0 	bl	80004e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f06f 0212 	mvn.w	r2, #18
 8001148:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001158:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d057      	beq.n	8001210 <HAL_ADC_IRQHandler+0x190>
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d054      	beq.n	8001210 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d105      	bne.n	800117e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d139      	bne.n	8001200 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001192:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12b      	bne.n	8001200 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d124      	bne.n	8001200 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d11d      	bne.n	8001200 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d119      	bne.n	8001200 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 fa91 	bl	8001728 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f06f 020c 	mvn.w	r2, #12
 800120e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800121e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d017      	beq.n	8001256 <HAL_ADC_IRQHandler+0x1d6>
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d014      	beq.n	8001256 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d10d      	bne.n	8001256 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f836 	bl	80012b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0201 	mvn.w	r2, #1
 8001254:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001264:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d015      	beq.n	8001298 <HAL_ADC_IRQHandler+0x218>
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d012      	beq.n	8001298 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f043 0202 	orr.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f06f 0220 	mvn.w	r2, #32
 8001286:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f81e 	bl	80012ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f06f 0220 	mvn.w	r2, #32
 8001296:	601a      	str	r2, [r3, #0]
  }
}
 8001298:	bf00      	nop
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x1c>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e103      	b.n	8001500 <HAL_ADC_ConfigChannel+0x224>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b09      	cmp	r3, #9
 8001306:	d925      	bls.n	8001354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68d9      	ldr	r1, [r3, #12]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	3b1e      	subs	r3, #30
 800131e:	2207      	movs	r2, #7
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43da      	mvns	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	400a      	ands	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68d9      	ldr	r1, [r3, #12]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	b29b      	uxth	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	4603      	mov	r3, r0
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4403      	add	r3, r0
 8001346:	3b1e      	subs	r3, #30
 8001348:	409a      	lsls	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	e022      	b.n	800139a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	2207      	movs	r2, #7
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6919      	ldr	r1, [r3, #16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4403      	add	r3, r0
 8001390:	409a      	lsls	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d824      	bhi.n	80013ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3b05      	subs	r3, #5
 80013b4:	221f      	movs	r2, #31
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	400a      	ands	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b05      	subs	r3, #5
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ea:	e04c      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d824      	bhi.n	800143e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b23      	subs	r3, #35	@ 0x23
 8001406:	221f      	movs	r2, #31
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43da      	mvns	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	400a      	ands	r2, r1
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b23      	subs	r3, #35	@ 0x23
 8001430:	fa00 f203 	lsl.w	r2, r0, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	631a      	str	r2, [r3, #48]	@ 0x30
 800143c:	e023      	b.n	8001486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b41      	subs	r3, #65	@ 0x41
 8001450:	221f      	movs	r2, #31
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b41      	subs	r3, #65	@ 0x41
 800147a:	fa00 f203 	lsl.w	r2, r0, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a20      	ldr	r2, [pc, #128]	@ (800150c <HAL_ADC_ConfigChannel+0x230>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d109      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1c8>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b12      	cmp	r3, #18
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <HAL_ADC_ConfigChannel+0x234>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <HAL_ADC_ConfigChannel+0x234>)
 800149e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a18      	ldr	r2, [pc, #96]	@ (800150c <HAL_ADC_ConfigChannel+0x230>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d123      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21a>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d003      	beq.n	80014be <HAL_ADC_ConfigChannel+0x1e2>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b11      	cmp	r3, #17
 80014bc:	d11b      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_ADC_ConfigChannel+0x234>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a13      	ldr	r2, [pc, #76]	@ (8001510 <HAL_ADC_ConfigChannel+0x234>)
 80014c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014c8:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d111      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_ADC_ConfigChannel+0x238>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_ADC_ConfigChannel+0x23c>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9a      	lsrs	r2, r3, #18
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40012000 	.word	0x40012000
 8001510:	40012300 	.word	0x40012300
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001524:	4b7e      	ldr	r3, [pc, #504]	@ (8001720 <ADC_Init+0x204>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4a7d      	ldr	r2, [pc, #500]	@ (8001720 <ADC_Init+0x204>)
 800152a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800152e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001530:	4b7b      	ldr	r3, [pc, #492]	@ (8001720 <ADC_Init+0x204>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4979      	ldr	r1, [pc, #484]	@ (8001720 <ADC_Init+0x204>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800154c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	021a      	lsls	r2, r3, #8
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6899      	ldr	r1, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68da      	ldr	r2, [r3, #12]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001724 <ADC_Init+0x208>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d022      	beq.n	80015f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6899      	ldr	r1, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	e00f      	b.n	8001616 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001614:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 0202 	bic.w	r2, r2, #2
 8001624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e1b      	ldrb	r3, [r3, #24]
 8001630:	005a      	lsls	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d027      	beq.n	8001694 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001652:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	3b01      	subs	r3, #1
 800166a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800166e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	fa92 f2a2 	rbit	r2, r2
 8001676:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	fab2 f282 	clz	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	fa03 f102 	lsl.w	r1, r3, r2
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	e007      	b.n	80016a4 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	3b01      	subs	r3, #1
 80016c0:	051a      	lsls	r2, r3, #20
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6899      	ldr	r1, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016e6:	025a      	lsls	r2, r3, #9
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	029a      	lsls	r2, r3, #10
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40012300 	.word	0x40012300
 8001724:	0f000001 	.word	0x0f000001

08001728 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
	...

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4906      	ldr	r1, [pc, #24]	@ (80017d4 <__NVIC_EnableIRQ+0x34>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	db0a      	blt.n	8001802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	490c      	ldr	r1, [pc, #48]	@ (8001824 <__NVIC_SetPriority+0x4c>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	440b      	add	r3, r1
 80017fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001800:	e00a      	b.n	8001818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4908      	ldr	r1, [pc, #32]	@ (8001828 <__NVIC_SetPriority+0x50>)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	3b04      	subs	r3, #4
 8001810:	0112      	lsls	r2, r2, #4
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	440b      	add	r3, r1
 8001816:	761a      	strb	r2, [r3, #24]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f1c3 0307 	rsb	r3, r3, #7
 8001846:	2b04      	cmp	r3, #4
 8001848:	bf28      	it	cs
 800184a:	2304      	movcs	r3, #4
 800184c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3304      	adds	r3, #4
 8001852:	2b06      	cmp	r3, #6
 8001854:	d902      	bls.n	800185c <NVIC_EncodePriority+0x30>
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3b03      	subs	r3, #3
 800185a:	e000      	b.n	800185e <NVIC_EncodePriority+0x32>
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	f04f 32ff 	mov.w	r2, #4294967295
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	401a      	ands	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001874:	f04f 31ff 	mov.w	r1, #4294967295
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43d9      	mvns	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	4313      	orrs	r3, r2
         );
}
 8001886:	4618      	mov	r0, r3
 8001888:	3724      	adds	r7, #36	@ 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr

08001890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3b01      	subs	r3, #1
 800189c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a0:	d301      	bcc.n	80018a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <SysTick_Config+0x40>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ae:	210f      	movs	r1, #15
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f7ff ff90 	bl	80017d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <SysTick_Config+0x40>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018be:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <SysTick_Config+0x40>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	e000e010 	.word	0xe000e010

080018d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff2d 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fc:	f7ff ff42 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68b9      	ldr	r1, [r7, #8]
 8001906:	6978      	ldr	r0, [r7, #20]
 8001908:	f7ff ff90 	bl	800182c <NVIC_EncodePriority>
 800190c:	4602      	mov	r2, r0
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff5f 	bl	80017d8 <__NVIC_SetPriority>
}
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff35 	bl	80017a0 <__NVIC_EnableIRQ>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa2 	bl	8001890 <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d004      	beq.n	8001974 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2280      	movs	r2, #128	@ 0x80
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e00c      	b.n	800198e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2205      	movs	r2, #5
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e16f      	b.n	8001c88 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8161 	beq.w	8001c82 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d005      	beq.n	80019d8 <HAL_GPIO_Init+0x40>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d130      	bne.n	8001a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a0e:	2201      	movs	r2, #1
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0201 	and.w	r2, r3, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d017      	beq.n	8001a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d123      	bne.n	8001aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0203 	and.w	r2, r3, #3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80bb 	beq.w	8001c82 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	4b64      	ldr	r3, [pc, #400]	@ (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	4a63      	ldr	r2, [pc, #396]	@ (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1c:	4b61      	ldr	r3, [pc, #388]	@ (8001ca4 <HAL_GPIO_Init+0x30c>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b28:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca8 <HAL_GPIO_Init+0x310>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a57      	ldr	r2, [pc, #348]	@ (8001cac <HAL_GPIO_Init+0x314>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d031      	beq.n	8001bb8 <HAL_GPIO_Init+0x220>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a56      	ldr	r2, [pc, #344]	@ (8001cb0 <HAL_GPIO_Init+0x318>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d02b      	beq.n	8001bb4 <HAL_GPIO_Init+0x21c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a55      	ldr	r2, [pc, #340]	@ (8001cb4 <HAL_GPIO_Init+0x31c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d025      	beq.n	8001bb0 <HAL_GPIO_Init+0x218>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a54      	ldr	r2, [pc, #336]	@ (8001cb8 <HAL_GPIO_Init+0x320>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d01f      	beq.n	8001bac <HAL_GPIO_Init+0x214>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a53      	ldr	r2, [pc, #332]	@ (8001cbc <HAL_GPIO_Init+0x324>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d019      	beq.n	8001ba8 <HAL_GPIO_Init+0x210>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a52      	ldr	r2, [pc, #328]	@ (8001cc0 <HAL_GPIO_Init+0x328>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d013      	beq.n	8001ba4 <HAL_GPIO_Init+0x20c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a51      	ldr	r2, [pc, #324]	@ (8001cc4 <HAL_GPIO_Init+0x32c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00d      	beq.n	8001ba0 <HAL_GPIO_Init+0x208>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a50      	ldr	r2, [pc, #320]	@ (8001cc8 <HAL_GPIO_Init+0x330>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <HAL_GPIO_Init+0x204>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8001ccc <HAL_GPIO_Init+0x334>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d101      	bne.n	8001b98 <HAL_GPIO_Init+0x200>
 8001b94:	2308      	movs	r3, #8
 8001b96:	e010      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001b98:	2309      	movs	r3, #9
 8001b9a:	e00e      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	e00c      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	e00a      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001ba4:	2305      	movs	r3, #5
 8001ba6:	e008      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x222>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bcc:	4936      	ldr	r1, [pc, #216]	@ (8001ca8 <HAL_GPIO_Init+0x310>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a34      	ldr	r2, [pc, #208]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c28:	4a29      	ldr	r2, [pc, #164]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c52:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_GPIO_Init+0x338>)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f47f ae88 	bne.w	80019a8 <HAL_GPIO_Init+0x10>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40013800 	.word	0x40013800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	40020400 	.word	0x40020400
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	40020c00 	.word	0x40020c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40021400 	.word	0x40021400
 8001cc4:	40021800 	.word	0x40021800
 8001cc8:	40021c00 	.word	0x40021c00
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e101      	b.n	8001f1a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7fe ff4b 	bl	8000bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d44:	d102      	bne.n	8001d4c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 f9f6 	bl	8003142 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7c1a      	ldrb	r2, [r3, #16]
 8001d5e:	f88d 2000 	strb.w	r2, [sp]
 8001d62:	3304      	adds	r3, #4
 8001d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d66:	f001 f993 	bl	8003090 <USB_CoreInit>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0ce      	b.n	8001f1a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 f9ed 	bl	8003162 <USB_SetCurrentMode>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2202      	movs	r2, #2
 8001d92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0bf      	b.n	8001f1a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	e04a      	b.n	8001e36 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	3315      	adds	r3, #21
 8001db0:	2201      	movs	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3314      	adds	r3, #20
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	332e      	adds	r3, #46	@ 0x2e
 8001ddc:	4602      	mov	r2, r0
 8001dde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3318      	adds	r3, #24
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	331c      	adds	r3, #28
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	3320      	adds	r3, #32
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	3324      	adds	r3, #36	@ 0x24
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	3301      	adds	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3af      	bcc.n	8001da0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e044      	b.n	8001ed0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3b5      	bcc.n	8001e46 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7c1a      	ldrb	r2, [r3, #16]
 8001ee2:	f88d 2000 	strb.w	r2, [sp]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eea:	f001 f987 	bl	80031fc <USB_DevInit>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00c      	b.n	8001f1a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f001 fb4c 	bl	80035b0 <USB_DevDisconnect>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	@ 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e23b      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d050      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f42:	4b9e      	ldr	r3, [pc, #632]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d00c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f4e:	4b9b      	ldr	r3, [pc, #620]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d112      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f5a:	4b98      	ldr	r3, [pc, #608]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f66:	d10b      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	4b94      	ldr	r3, [pc, #592]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d036      	beq.n	8001fe2 <HAL_RCC_OscConfig+0xbe>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d132      	bne.n	8001fe2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e216      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	4b8e      	ldr	r3, [pc, #568]	@ (80021c0 <HAL_RCC_OscConfig+0x29c>)
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d013      	beq.n	8001fba <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe ff49 	bl	8000e28 <HAL_GetTick>
 8001f96:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9a:	f7fe ff45 	bl	8000e28 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	@ 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e200      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fac:	4b83      	ldr	r3, [pc, #524]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x76>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe ff35 	bl	8000e28 <HAL_GetTick>
 8001fbe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc2:	f7fe ff31 	bl	8000e28 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	@ 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1ec      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd4:	4b79      	ldr	r3, [pc, #484]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x9e>
 8001fe0:	e000      	b.n	8001fe4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d077      	beq.n	80020e0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff0:	4b72      	ldr	r3, [pc, #456]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002004:	2b08      	cmp	r3, #8
 8002006:	d126      	bne.n	8002056 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002008:	4b6c      	ldr	r3, [pc, #432]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d120      	bne.n	8002056 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002014:	4b69      	ldr	r3, [pc, #420]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x108>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e1c0      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202c:	4b63      	ldr	r3, [pc, #396]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	21f8      	movs	r1, #248	@ 0xf8
 800203a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	69b9      	ldr	r1, [r7, #24]
 800203e:	fa91 f1a1 	rbit	r1, r1
 8002042:	6179      	str	r1, [r7, #20]
  return result;
 8002044:	6979      	ldr	r1, [r7, #20]
 8002046:	fab1 f181 	clz	r1, r1
 800204a:	b2c9      	uxtb	r1, r1
 800204c:	408b      	lsls	r3, r1
 800204e:	495b      	ldr	r1, [pc, #364]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002054:	e044      	b.n	80020e0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d02a      	beq.n	80020b4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205e:	4b59      	ldr	r3, [pc, #356]	@ (80021c4 <HAL_RCC_OscConfig+0x2a0>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe fee0 	bl	8000e28 <HAL_GetTick>
 8002068:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206c:	f7fe fedc 	bl	8000e28 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e197      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b4f      	ldr	r3, [pc, #316]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	21f8      	movs	r1, #248	@ 0xf8
 8002098:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6939      	ldr	r1, [r7, #16]
 800209c:	fa91 f1a1 	rbit	r1, r1
 80020a0:	60f9      	str	r1, [r7, #12]
  return result;
 80020a2:	68f9      	ldr	r1, [r7, #12]
 80020a4:	fab1 f181 	clz	r1, r1
 80020a8:	b2c9      	uxtb	r1, r1
 80020aa:	408b      	lsls	r3, r1
 80020ac:	4943      	ldr	r1, [pc, #268]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b4:	4b43      	ldr	r3, [pc, #268]	@ (80021c4 <HAL_RCC_OscConfig+0x2a0>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7fe feb5 	bl	8000e28 <HAL_GetTick>
 80020be:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe feb1 	bl	8000e28 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e16c      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d030      	beq.n	800214e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d016      	beq.n	8002122 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f4:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x2a4>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7fe fe95 	bl	8000e28 <HAL_GetTick>
 80020fe:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe fe91 	bl	8000e28 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e14c      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002114:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x1de>
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002122:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <HAL_RCC_OscConfig+0x2a4>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7fe fe7e 	bl	8000e28 <HAL_GetTick>
 800212c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002130:	f7fe fe7a 	bl	8000e28 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e135      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8087 	beq.w	800226a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002162:	4b16      	ldr	r3, [pc, #88]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d110      	bne.n	8002190 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a11      	ldr	r2, [pc, #68]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <HAL_RCC_OscConfig+0x298>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <HAL_RCC_OscConfig+0x2a8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <HAL_RCC_OscConfig+0x2a8>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_RCC_OscConfig+0x2a8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d122      	bne.n	80021ee <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_RCC_OscConfig+0x2a8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_RCC_OscConfig+0x2a8>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fe38 	bl	8000e28 <HAL_GetTick>
 80021b8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	e012      	b.n	80021e2 <HAL_RCC_OscConfig+0x2be>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40023802 	.word	0x40023802
 80021c4:	42470000 	.word	0x42470000
 80021c8:	42470e80 	.word	0x42470e80
 80021cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d0:	f7fe fe2a 	bl	8000e28 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0e5      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	4b75      	ldr	r3, [pc, #468]	@ (80023b8 <HAL_RCC_OscConfig+0x494>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b72      	ldr	r3, [pc, #456]	@ (80023bc <HAL_RCC_OscConfig+0x498>)
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe fe12 	bl	8000e28 <HAL_GetTick>
 8002204:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe fe0e 	bl	8000e28 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0c7      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	4b68      	ldr	r3, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ee      	beq.n	8002208 <HAL_RCC_OscConfig+0x2e4>
 800222a:	e014      	b.n	8002256 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7fe fdfc 	bl	8000e28 <HAL_GetTick>
 8002230:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	e00a      	b.n	800224a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe fdf8 	bl	8000e28 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0b1      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	4b5d      	ldr	r3, [pc, #372]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b58      	ldr	r3, [pc, #352]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a57      	ldr	r2, [pc, #348]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 809c 	beq.w	80023ac <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002274:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d061      	beq.n	8002344 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d146      	bne.n	8002316 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b4e      	ldr	r3, [pc, #312]	@ (80023c4 <HAL_RCC_OscConfig+0x4a0>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fdcb 	bl	8000e28 <HAL_GetTick>
 8002292:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fdc7 	bl	8000e28 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	@ 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e082      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b42      	ldr	r3, [pc, #264]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	4b43      	ldr	r3, [pc, #268]	@ (80023c8 <HAL_RCC_OscConfig+0x4a4>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	69d1      	ldr	r1, [r2, #28]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6a12      	ldr	r2, [r2, #32]
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ca:	0192      	lsls	r2, r2, #6
 80022cc:	4311      	orrs	r1, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022d2:	0612      	lsls	r2, r2, #24
 80022d4:	4311      	orrs	r1, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80022da:	0852      	lsrs	r2, r2, #1
 80022dc:	3a01      	subs	r2, #1
 80022de:	0412      	lsls	r2, r2, #16
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4937      	ldr	r1, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	4b36      	ldr	r3, [pc, #216]	@ (80023c4 <HAL_RCC_OscConfig+0x4a0>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fd9b 	bl	8000e28 <HAL_GetTick>
 80022f2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fd97 	bl	8000e28 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b64      	cmp	r3, #100	@ 0x64
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e052      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002308:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x3d2>
 8002314:	e04a      	b.n	80023ac <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_RCC_OscConfig+0x4a0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fd84 	bl	8000e28 <HAL_GetTick>
 8002320:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe fd80 	bl	8000e28 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e03b      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	4b22      	ldr	r3, [pc, #136]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x400>
 8002342:	e033      	b.n	80023ac <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e02e      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_RCC_OscConfig+0x49c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	429a      	cmp	r2, r3
 8002362:	d121      	bne.n	80023a8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d11a      	bne.n	80023a8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002378:	4013      	ands	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800237e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002380:	4293      	cmp	r3, r2
 8002382:	d111      	bne.n	80023a8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	3b01      	subs	r3, #1
 8002392:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3728      	adds	r7, #40	@ 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40007000 	.word	0x40007000
 80023bc:	40023870 	.word	0x40023870
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470060 	.word	0x42470060
 80023c8:	f0bc8000 	.word	0xf0bc8000

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0d2      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d90c      	bls.n	8002408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b68      	ldr	r3, [pc, #416]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b66      	ldr	r3, [pc, #408]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0be      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b5c      	ldr	r3, [pc, #368]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4a5b      	ldr	r2, [pc, #364]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800242a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002438:	4b56      	ldr	r3, [pc, #344]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a55      	ldr	r2, [pc, #340]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800243e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	4950      	ldr	r1, [pc, #320]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d040      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e085      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b44      	ldr	r3, [pc, #272]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e079      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e071      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4939      	ldr	r1, [pc, #228]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b4:	f7fe fcb8 	bl	8000e28 <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe fcb4 	bl	8000e28 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e059      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d20c      	bcs.n	800250c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e03c      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	491b      	ldr	r1, [pc, #108]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002536:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4913      	ldr	r1, [pc, #76]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800254a:	f000 f82b 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800254e:	4601      	mov	r1, r0
 8002550:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <HAL_RCC_ClockConfig+0x1c8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002558:	22f0      	movs	r2, #240	@ 0xf0
 800255a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	60fa      	str	r2, [r7, #12]
  return result;
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	fab2 f282 	clz	r2, r2
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	40d3      	lsrs	r3, r2
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	fa21 f303 	lsr.w	r3, r1, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1d0>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_ClockConfig+0x1d4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fc10 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	080036dc 	.word	0x080036dc
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a8:	b094      	sub	sp, #80	@ 0x50
 80025aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b0:	2300      	movs	r3, #0
 80025b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b4:	2300      	movs	r3, #0
 80025b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025bc:	4b7c      	ldr	r3, [pc, #496]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d00d      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x40>
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	f200 80e7 	bhi.w	800279c <HAL_RCC_GetSysClockFreq+0x1f8>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x34>
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x3a>
 80025d6:	e0e1      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x210>)
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80025dc:	e0e1      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025de:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x214>)
 80025e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025e2:	e0de      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e4:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ee:	4b70      	ldr	r3, [pc, #448]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d065      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fa:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	2200      	movs	r2, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002604:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
 8002612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002616:	4622      	mov	r2, r4
 8002618:	462b      	mov	r3, r5
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0159      	lsls	r1, r3, #5
 8002624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002628:	0150      	lsls	r0, r2, #5
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4621      	mov	r1, r4
 8002630:	1a51      	subs	r1, r2, r1
 8002632:	6139      	str	r1, [r7, #16]
 8002634:	4629      	mov	r1, r5
 8002636:	eb63 0301 	sbc.w	r3, r3, r1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002648:	4659      	mov	r1, fp
 800264a:	018b      	lsls	r3, r1, #6
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002652:	4651      	mov	r1, sl
 8002654:	018a      	lsls	r2, r1, #6
 8002656:	46d4      	mov	ip, sl
 8002658:	ebb2 080c 	subs.w	r8, r2, ip
 800265c:	4659      	mov	r1, fp
 800265e:	eb63 0901 	sbc.w	r9, r3, r1
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800266e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002676:	4690      	mov	r8, r2
 8002678:	4699      	mov	r9, r3
 800267a:	4623      	mov	r3, r4
 800267c:	eb18 0303 	adds.w	r3, r8, r3
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	462b      	mov	r3, r5
 8002684:	eb49 0303 	adc.w	r3, r9, r3
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002696:	4629      	mov	r1, r5
 8002698:	024b      	lsls	r3, r1, #9
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	4604      	mov	r4, r0
 80026a0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80026a4:	4601      	mov	r1, r0
 80026a6:	024a      	lsls	r2, r1, #9
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ae:	2200      	movs	r2, #0
 80026b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026b8:	f7fd fd84 	bl	80001c4 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c4:	e05c      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b3a      	ldr	r3, [pc, #232]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	4611      	mov	r1, r2
 80026d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
 80026dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	0159      	lsls	r1, r3, #5
 80026ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f2:	0150      	lsls	r0, r2, #5
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	46c4      	mov	ip, r8
 80026fa:	ebb2 0a0c 	subs.w	sl, r2, ip
 80026fe:	4640      	mov	r0, r8
 8002700:	4649      	mov	r1, r9
 8002702:	468c      	mov	ip, r1
 8002704:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002714:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002718:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800271c:	ebb2 040a 	subs.w	r4, r2, sl
 8002720:	eb63 050b 	sbc.w	r5, r3, fp
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	00eb      	lsls	r3, r5, #3
 800272e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002732:	00e2      	lsls	r2, r4, #3
 8002734:	4614      	mov	r4, r2
 8002736:	461d      	mov	r5, r3
 8002738:	4603      	mov	r3, r0
 800273a:	18e3      	adds	r3, r4, r3
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	460b      	mov	r3, r1
 8002740:	eb45 0303 	adc.w	r3, r5, r3
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002752:	4629      	mov	r1, r5
 8002754:	028b      	lsls	r3, r1, #10
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	4604      	mov	r4, r0
 800275c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002760:	4601      	mov	r1, r0
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276a:	2200      	movs	r2, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	61fa      	str	r2, [r7, #28]
 8002770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002774:	f7fd fd26 	bl	80001c4 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002780:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b05      	ldr	r3, [pc, #20]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x210>)
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3750      	adds	r7, #80	@ 0x50
 80027a8:	46bd      	mov	sp, r7
 80027aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	00f42400 	.word	0x00f42400
 80027b8:	007a1200 	.word	0x007a1200

080027bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c0:	4b02      	ldr	r3, [pc, #8]	@ (80027cc <HAL_RCC_GetHCLKFreq+0x10>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000000 	.word	0x20000000

080027d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80027d6:	f7ff fff1 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 80027da:	4601      	mov	r1, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80027e4:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80027e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	fa92 f2a2 	rbit	r2, r2
 80027f0:	603a      	str	r2, [r7, #0]
  return result;
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	40d3      	lsrs	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x40>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	080036ec 	.word	0x080036ec

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800281a:	f7ff ffcf 	bl	80027bc <HAL_RCC_GetHCLKFreq>
 800281e:	4601      	mov	r1, r0
 8002820:	4b0b      	ldr	r3, [pc, #44]	@ (8002850 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002828:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800282c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	fa92 f2a2 	rbit	r2, r2
 8002834:	603a      	str	r2, [r7, #0]
  return result;
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	40d3      	lsrs	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	080036ec 	.word	0x080036ec

08002858 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07b      	b.n	8002962 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800287a:	d009      	beq.n	8002890 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
 8002882:	e005      	b.n	8002890 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7fe f8d6 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	ea42 0103 	orr.w	r1, r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0104 	and.w	r1, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	f003 0210 	and.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002950:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10e      	bne.n	80029ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	d009      	beq.n	80029ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
    return;
 80029aa:	e0ce      	b.n	8002b4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_SPI_IRQHandler+0x5e>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
    return;
 80029c8:	e0bf      	b.n	8002b4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_SPI_IRQHandler+0x7e>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80b0 	beq.w	8002b4a <HAL_SPI_IRQHandler+0x1de>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80aa 	beq.w	8002b4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d023      	beq.n	8002a48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d011      	beq.n	8002a30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a10:	f043 0204 	orr.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	e00b      	b.n	8002a48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
        return;
 8002a46:	e080      	b.n	8002b4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d014      	beq.n	8002a7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f043 0208 	orr.w	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d04f      	beq.n	8002b48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ab6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d104      	bne.n	8002ad4 <HAL_SPI_IRQHandler+0x168>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d034      	beq.n	8002b3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0203 	bic.w	r2, r2, #3
 8002ae2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d011      	beq.n	8002b10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af0:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_SPI_IRQHandler+0x1e4>)
 8002af2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe ff2c 	bl	8001956 <HAL_DMA_Abort_IT>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <HAL_SPI_IRQHandler+0x1e4>)
 8002b1e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe ff16 	bl	8001956 <HAL_DMA_Abort_IT>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002b3c:	e003      	b.n	8002b46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f808 	bl	8002b54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b44:	e000      	b.n	8002b48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002b46:	bf00      	nop
    return;
 8002b48:	bf00      	nop
  }
}
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08002b67 	.word	0x08002b67

08002b54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff ffe7 	bl	8002b54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e042      	b.n	8002c26 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d106      	bne.n	8002bba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7fd ffc1 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2224      	movs	r2, #36	@ 0x24
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f972 	bl	8002ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002be6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bf6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b08a      	sub	sp, #40	@ 0x28
 8002c32:	af02      	add	r7, sp, #8
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d175      	bne.n	8002d3a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_UART_Transmit+0x2c>
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e06e      	b.n	8002d3c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2221      	movs	r2, #33	@ 0x21
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe f8dc 	bl	8000e28 <HAL_GetTick>
 8002c70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	88fa      	ldrh	r2, [r7, #6]
 8002c76:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c86:	d108      	bne.n	8002c9a <HAL_UART_Transmit+0x6c>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e003      	b.n	8002ca2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ca2:	e02e      	b.n	8002d02 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2180      	movs	r1, #128	@ 0x80
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f848 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e03a      	b.n	8002d3c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cda:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	3302      	adds	r3, #2
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	e007      	b.n	8002cf4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1cb      	bne.n	8002ca4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	2140      	movs	r1, #64	@ 0x40
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f814 	bl	8002d44 <UART_WaitOnFlagUntilTimeout>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e006      	b.n	8002d3c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d3a:	2302      	movs	r3, #2
  }
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d54:	e03b      	b.n	8002dce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d037      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fe f863 	bl	8000e28 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e03a      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d023      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b80      	cmp	r3, #128	@ 0x80
 8002d8a:	d020      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b40      	cmp	r3, #64	@ 0x40
 8002d90:	d01d      	beq.n	8002dce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d116      	bne.n	8002dce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f81d 	bl	8002df6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d0b4      	beq.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b095      	sub	sp, #84	@ 0x54
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e5      	bne.n	8002dfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3314      	adds	r3, #20
 8002e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	e853 3f00 	ldrex	r3, [r3]
 8002e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e5      	bne.n	8002e32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d119      	bne.n	8002ea2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	330c      	adds	r3, #12
 8002e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	e853 3f00 	ldrex	r3, [r3]
 8002e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f023 0310 	bic.w	r3, r3, #16
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e8e:	61ba      	str	r2, [r7, #24]
 8002e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	6979      	ldr	r1, [r7, #20]
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	e841 2300 	strex	r3, r2, [r1]
 8002e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e5      	bne.n	8002e6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eb0:	bf00      	nop
 8002eb2:	3754      	adds	r7, #84	@ 0x54
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
	...

08002ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002efc:	f023 030c 	bic.w	r3, r3, #12
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a57      	ldr	r2, [pc, #348]	@ (8003084 <UART_SetConfig+0x1c8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <UART_SetConfig+0x78>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a56      	ldr	r2, [pc, #344]	@ (8003088 <UART_SetConfig+0x1cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d103      	bne.n	8002f3c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f34:	f7ff fc6e 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	e002      	b.n	8002f42 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f7ff fc48 	bl	80027d0 <HAL_RCC_GetPCLK1Freq>
 8002f40:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f4a:	d14c      	bne.n	8002fe6 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009a      	lsls	r2, r3, #2
 8002f56:	441a      	add	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4a4a      	ldr	r2, [pc, #296]	@ (800308c <UART_SetConfig+0x1d0>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	0119      	lsls	r1, r3, #4
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009a      	lsls	r2, r3, #2
 8002f76:	441a      	add	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f82:	4b42      	ldr	r3, [pc, #264]	@ (800308c <UART_SetConfig+0x1d0>)
 8002f84:	fba3 0302 	umull	r0, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2064      	movs	r0, #100	@ 0x64
 8002f8c:	fb00 f303 	mul.w	r3, r0, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	3332      	adds	r3, #50	@ 0x32
 8002f96:	4a3d      	ldr	r2, [pc, #244]	@ (800308c <UART_SetConfig+0x1d0>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002fa4:	4419      	add	r1, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbc:	4b33      	ldr	r3, [pc, #204]	@ (800308c <UART_SetConfig+0x1d0>)
 8002fbe:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2064      	movs	r0, #100	@ 0x64
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	3332      	adds	r3, #50	@ 0x32
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800308c <UART_SetConfig+0x1d0>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	f003 0207 	and.w	r2, r3, #7
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	440a      	add	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe4:	e04a      	b.n	800307c <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009a      	lsls	r2, r3, #2
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	4a23      	ldr	r2, [pc, #140]	@ (800308c <UART_SetConfig+0x1d0>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	0119      	lsls	r1, r3, #4
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	009a      	lsls	r2, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	fbb2 f2f3 	udiv	r2, r2, r3
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <UART_SetConfig+0x1d0>)
 800301e:	fba3 0302 	umull	r0, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2064      	movs	r0, #100	@ 0x64
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	@ 0x32
 8003030:	4a16      	ldr	r2, [pc, #88]	@ (800308c <UART_SetConfig+0x1d0>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800303c:	4419      	add	r1, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fbb2 f2f3 	udiv	r2, r2, r3
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <UART_SetConfig+0x1d0>)
 8003056:	fba3 0302 	umull	r0, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2064      	movs	r0, #100	@ 0x64
 800305e:	fb00 f303 	mul.w	r3, r0, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	3332      	adds	r3, #50	@ 0x32
 8003068:	4a08      	ldr	r2, [pc, #32]	@ (800308c <UART_SetConfig+0x1d0>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	440a      	add	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40011000 	.word	0x40011000
 8003088:	40011400 	.word	0x40011400
 800308c:	51eb851f 	.word	0x51eb851f

08003090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003090:	b084      	sub	sp, #16
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	f107 001c 	add.w	r0, r7, #28
 800309e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d123      	bne.n	80030f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80030be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80030d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa8f 	bl	800360a <USB_CoreReset>
 80030ec:	4603      	mov	r3, r0
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e010      	b.n	8003114 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa83 	bl	800360a <USB_CoreReset>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003114:	7fbb      	ldrb	r3, [r7, #30]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d10b      	bne.n	8003132 <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f043 0206 	orr.w	r2, r3, #6
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800313e:	b004      	add	sp, #16
 8003140:	4770      	bx	lr

08003142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 0201 	bic.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d115      	bne.n	80031b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003190:	200a      	movs	r0, #10
 8003192:	f7fd fe53 	bl	8000e3c <HAL_Delay>
      ms += 10U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	330a      	adds	r3, #10
 800319a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fa27 	bl	80035f0 <USB_GetMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d01e      	beq.n	80031e6 <USB_SetCurrentMode+0x84>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80031ac:	d9f0      	bls.n	8003190 <USB_SetCurrentMode+0x2e>
 80031ae:	e01a      	b.n	80031e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80031c2:	200a      	movs	r0, #10
 80031c4:	f7fd fe3a 	bl	8000e3c <HAL_Delay>
      ms += 10U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	330a      	adds	r3, #10
 80031cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa0e 	bl	80035f0 <USB_GetMode>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <USB_SetCurrentMode+0x84>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80031de:	d9f0      	bls.n	80031c2 <USB_SetCurrentMode+0x60>
 80031e0:	e001      	b.n	80031e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e005      	b.n	80031f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80031ea:	d101      	bne.n	80031f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031fc:	b084      	sub	sp, #16
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800320a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e009      	b.n	8003230 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	3340      	adds	r3, #64	@ 0x40
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	2200      	movs	r2, #0
 8003228:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	3301      	adds	r3, #1
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	2b0e      	cmp	r3, #14
 8003234:	d9f2      	bls.n	800321c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003236:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800323a:	2b00      	cmp	r3, #0
 800323c:	d11c      	bne.n	8003278 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800324c:	f043 0302 	orr.w	r3, r3, #2
 8003250:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	639a      	str	r2, [r3, #56]	@ 0x38
 8003276:	e00b      	b.n	8003290 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003296:	461a      	mov	r2, r3
 8003298:	2300      	movs	r3, #0
 800329a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800329c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d10d      	bne.n	80032c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032ac:	2100      	movs	r1, #0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f966 	bl	8003580 <USB_SetDevSpeed>
 80032b4:	e008      	b.n	80032c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032b6:	2101      	movs	r1, #1
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f961 	bl	8003580 <USB_SetDevSpeed>
 80032be:	e003      	b.n	80032c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80032c0:	2103      	movs	r1, #3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f95c 	bl	8003580 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80032c8:	2110      	movs	r1, #16
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8fa 	bl	80034c4 <USB_FlushTxFifo>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f923 	bl	8003526 <USB_FlushRxFifo>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f0:	461a      	mov	r2, r3
 80032f2:	2300      	movs	r3, #0
 80032f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032fc:	461a      	mov	r2, r3
 80032fe:	2300      	movs	r3, #0
 8003300:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003308:	461a      	mov	r2, r3
 800330a:	2300      	movs	r3, #0
 800330c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	e043      	b.n	800339c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800332a:	d118      	bne.n	800335e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333e:	461a      	mov	r2, r3
 8003340:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e013      	b.n	8003370 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003354:	461a      	mov	r2, r3
 8003356:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e008      	b.n	8003370 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800336a:	461a      	mov	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337c:	461a      	mov	r2, r3
 800337e:	2300      	movs	r3, #0
 8003380:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800338e:	461a      	mov	r2, r3
 8003390:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003394:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	3301      	adds	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033a0:	461a      	mov	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d3b5      	bcc.n	8003314 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	e043      	b.n	8003436 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033c4:	d118      	bne.n	80033f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	e013      	b.n	800340a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ee:	461a      	mov	r2, r3
 80033f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e008      	b.n	800340a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	2300      	movs	r3, #0
 800341a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800342e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	3301      	adds	r3, #1
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800343a:	461a      	mov	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4293      	cmp	r3, r2
 8003440:	d3b5      	bcc.n	80033ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003454:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003462:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003464:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f043 0210 	orr.w	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <USB_DevInit+0x2c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003484:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f043 0208 	orr.w	r2, r3, #8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003498:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034bc:	b004      	add	sp, #16
 80034be:	4770      	bx	lr
 80034c0:	803c3800 	.word	0x803c3800

080034c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3301      	adds	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80034de:	d901      	bls.n	80034e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e01b      	b.n	800351c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	daf2      	bge.n	80034d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003508:	d901      	bls.n	800350e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e006      	b.n	800351c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b20      	cmp	r3, #32
 8003518:	d0f0      	beq.n	80034fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	3301      	adds	r3, #1
 8003536:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800353e:	d901      	bls.n	8003544 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e018      	b.n	8003576 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	daf2      	bge.n	8003532 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2210      	movs	r2, #16
 8003554:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3301      	adds	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003562:	d901      	bls.n	8003568 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e006      	b.n	8003576 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b10      	cmp	r3, #16
 8003572:	d0f0      	beq.n	8003556 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	68f9      	ldr	r1, [r7, #12]
 800359c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr

080035f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f003 0301 	and.w	r3, r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3301      	adds	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003622:	d901      	bls.n	8003628 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e01b      	b.n	8003660 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	daf2      	bge.n	8003616 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f043 0201 	orr.w	r2, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800364c:	d901      	bls.n	8003652 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e006      	b.n	8003660 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d0f0      	beq.n	8003640 <USB_CoreReset+0x36>

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr

0800366a <memset>:
 800366a:	4603      	mov	r3, r0
 800366c:	4402      	add	r2, r0
 800366e:	4293      	cmp	r3, r2
 8003670:	d100      	bne.n	8003674 <memset+0xa>
 8003672:	4770      	bx	lr
 8003674:	f803 1b01 	strb.w	r1, [r3], #1
 8003678:	e7f9      	b.n	800366e <memset+0x4>
	...

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	2600      	movs	r6, #0
 8003680:	4d0c      	ldr	r5, [pc, #48]	@ (80036b4 <__libc_init_array+0x38>)
 8003682:	4c0d      	ldr	r4, [pc, #52]	@ (80036b8 <__libc_init_array+0x3c>)
 8003684:	1b64      	subs	r4, r4, r5
 8003686:	10a4      	asrs	r4, r4, #2
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	f000 f81a 	bl	80036c4 <_init>
 8003690:	2600      	movs	r6, #0
 8003692:	4d0a      	ldr	r5, [pc, #40]	@ (80036bc <__libc_init_array+0x40>)
 8003694:	4c0a      	ldr	r4, [pc, #40]	@ (80036c0 <__libc_init_array+0x44>)
 8003696:	1b64      	subs	r4, r4, r5
 8003698:	10a4      	asrs	r4, r4, #2
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	080036fc 	.word	0x080036fc
 80036b8:	080036fc 	.word	0x080036fc
 80036bc:	080036fc 	.word	0x080036fc
 80036c0:	08003700 	.word	0x08003700

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
